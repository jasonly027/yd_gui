name: Multi-platform Tests

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false

            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                build_type: [Release]
                include:
                    # Windows
                    - os: windows-latest
                      c_compiler: cl
                      cpp_compiler: cl

                    # Ubuntu
                    - os: ubuntu-latest
                      c_compiler: gcc
                      cpp_compiler: g++

                    # MacOS
                    - os: macos-latest
                      c_compiler: clang
                      cpp_compiler: clang++

        steps:
            - uses: actions/checkout@v4

            - name: Setup MSVC
              uses: ilammy/msvc-dev-cmd@v1

            - name: Setup Ninja
              uses: seanmiddleditch/gha-setup-ninja@master

            - name: Setup Qt (Not for macos-latest)
              if: matrix.os != 'macos-latest'
              uses: jurplel/install-qt-action@v4
              with:
                  version: "6.7.2"
                  dir: ${{ github.workspace }}/external
                  setup-python: false

            - name: Setup Qt (For macos-latest)
              if: matrix.os == 'macos-latest'
              run: brew install qt

            - name: Setup FFmpeg
              uses: AnimMouse/setup-ffmpeg@v1

            - name: Setup yt-dlp
              uses: AnimMouse/setup-yt-dlp@v1

            - name: Set reusable strings
              id: strings
              shell: bash
              run: |
                  echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

            - name: Configure CMake
              run: >
                  cmake -B ${{ steps.strings.outputs.build-output-dir }}
                  -G Ninja
                  -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
                  -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  -S ${{ github.workspace }}

            - name: Build
              run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target yd_gui_tests

            - name: Test
              working-directory: ${{ steps.strings.outputs.build-output-dir }}
              # Excluded tests require yt-dlp sign-in to prevent botting
              run: ctest --build-config ${{ matrix.build_type }} --output-on-failure -E "(FetchInfoJm|FetchInfoPlaylist|EnqueueOneVideo|EnqueueTwoVideos|)"
